The purpose of the accompanying file is to serve STS federated users (these are users with temporary IAM credentials, 
which expire after a short, defined time (<= 12 hrs)), which are granted automatic S3 resource access based on an ABAC-like policy.
Use Case:
If you are an IAM user with limited permissions using the neurocaas cloud, this is likely is not relevant (due to permission needs outlined below).

However, this may be useful to users with elevated permissions looking to grant temporary access to other users, 
or users with their own, separately hosted neurocaas system.
To build a user and get credentials and a federated access link:
    python federation.py build bucket_prefix group_prefix
To Remove all existing sts roles with the stored prefix:
    python federation.py teardown_all bucket_prefix group_prefix
Explanation:
This program creates a user role defined by the accompanying 'aws_federation_policy.json' document, 
which should be created on your AWS instance. On the official neurocaas.org cloud, this policy is named 'access-same-project-team'.
Furthermore a non-federated IAM must exist to federate new users, with access to all of the relevant buckets and files. 
This user must have access to certain permission delegation functions which can be seen in this file, 
including assume_role, attach_policy, detach_policy, etc. 
See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html for relevant policy information.
S3 resource access is established through a hybrid tag and prefix system. 
Upon creation, the federated user is tagged with relevant group and bucket prefixes (one of each), 
which is the only resource this user will have access too. However, this system can be modified as needed by adapting the policy (for example allowing access to all buckets).
The aforementioned policy uses the prefixes contained in access tags to determine the allowed bucket and folder, so ensure these are correct.
If proper access is established, the user should have read-write access to configs/submissions, 
write access to inputs, and read access to results. Modify the policy document for different access functionality.

See https://docs.aws.amazon.com/STS/latest/APIReference/welcome.html for information on STS, 
and https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/python/example_code/sts/sts_temporary_credentials#code-examples for STS federation examples.
